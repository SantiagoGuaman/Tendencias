
package ws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "VentasOperaciones", targetNamespace = "http://ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface VentasOperaciones {


    /**
     * 
     * @param txt
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "encrypt", targetNamespace = "http://ws/", className = "ws.Encrypt")
    @ResponseWrapper(localName = "encryptResponse", targetNamespace = "http://ws/", className = "ws.EncryptResponse")
    @Action(input = "http://ws/VentasOperaciones/encryptRequest", output = "http://ws/VentasOperaciones/encryptResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://ws/VentasOperaciones/encrypt/Fault/Exception")
    })
    public String encrypt(
        @WebParam(name = "txt", targetNamespace = "")
        String txt)
        throws Exception_Exception
    ;

    /**
     * 
     * @param txt
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "decrypt", targetNamespace = "http://ws/", className = "ws.Decrypt")
    @ResponseWrapper(localName = "decryptResponse", targetNamespace = "http://ws/", className = "ws.DecryptResponse")
    @Action(input = "http://ws/VentasOperaciones/decryptRequest", output = "http://ws/VentasOperaciones/decryptResponse", fault = {
        @FaultAction(className = Exception_Exception.class, value = "http://ws/VentasOperaciones/decrypt/Fault/Exception")
    })
    public String decrypt(
        @WebParam(name = "txt", targetNamespace = "")
        String txt)
        throws Exception_Exception
    ;

    /**
     * 
     * @param password
     * @param mail
     * @param cedula
     * @param apellido
     * @param direccion
     * @param telefono
     * @param nombre
     * @return
     *     returns java.lang.Boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "registroUsuario", targetNamespace = "http://ws/", className = "ws.RegistroUsuario")
    @ResponseWrapper(localName = "registroUsuarioResponse", targetNamespace = "http://ws/", className = "ws.RegistroUsuarioResponse")
    @Action(input = "http://ws/VentasOperaciones/registroUsuarioRequest", output = "http://ws/VentasOperaciones/registroUsuarioResponse")
    public Boolean registroUsuario(
        @WebParam(name = "nombre", targetNamespace = "")
        String nombre,
        @WebParam(name = "apellido", targetNamespace = "")
        String apellido,
        @WebParam(name = "cedula", targetNamespace = "")
        String cedula,
        @WebParam(name = "direccion", targetNamespace = "")
        String direccion,
        @WebParam(name = "telefono", targetNamespace = "")
        String telefono,
        @WebParam(name = "mail", targetNamespace = "")
        String mail,
        @WebParam(name = "password", targetNamespace = "")
        String password);

}
